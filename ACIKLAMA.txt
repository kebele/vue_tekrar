
🌟 Course Contents 🌟
⏳ (00:00:00) Course Intro
⏳ (00:06:19) Understanding Vue vs React
⏳ (00:13:19) First Vue App
⏳ (00:45:13) Vue Devtool and Vetur Extension
⏳ (01:22:27) DC Heros List
⏳ (02:37:19) Calendar App
⏳ (03:15:12) Vue Router 
⏳ (03:37:35) Markdown App
⏳ (03:54:56) Vue Virtual DOM
⏳ (04:07:01) Slider Carousel App
⏳ (04:37:12) Login Modal App
⏳ (05:00:00) Firebase Authentication
⏳ (05:48:07) Vue 3 Teleport
⏳ (05:51:30) Vue 3 composition API
⏳ (06:10:10) Calculator App
⏳ (06:54:31) Reusable Modal App
⏳ (07:28:24) Real Time Chat App
⏳ (08:00:21) Vuex 4
⏳ (08:19:05) Custom Vue js Middleware
⏳ (08:41:40) User Crud App
⏳ (09:37:02) Object Detection with Tensorflow
⏳ (10:15:31) Deploy On Netlify






* firebase entegrasyonu ile login

* firebase console dan yeni bir proje yapacağız, google anaytics olmasın, kurulduktan sonra authentication > giriş yöntemi > email/password > usttekini seçeceğiz alttaki email olmadan giriş onu seçmeyelim, users a gidip yeni bir user yapalım, firebse i uygulamamıza eklemek için gerekli yere girelim, web seçeceğiz, isim vereceğiz hosting istemiyoruz, bize birkod verecek bunu kopyalayıp, utulities > firebase.js dosyası yapıp içine yapışıracağız, şimdi npm ile firebase i projeye kuralım, npm install --save firebase, bize verdiği kodu module şeklinde düzenleyeceğiz, son hali var zaten,  
son olarak export default firebase olarak export edeceğiz

* şimdi yine firebase docs da authentication sekmesinde web e gidelim, get started > sign in existing user skısmına bakaım, çünkü bir kullanıcı kaydetmiştik zaten,  loginModal.vue ya gidelim, önce firebase i import edelim,  daha sonra da submit methodunu hazırlayalım, ve deneyelim

*başarılı response geldi, şimdi giriş başarılı olduğunda login modal ı hide olsun, firebase docs da manage user a gidipget the currently signed user a gidelim, işlk ethodu kullanacağız, App.vue ya gideceğiz ve bu kopyaladığımız methodu mounted olarak kullanacağız, çünkü ana komponent bu eğr kullanıcı girş yaptıysa burada kontrolu olacak, tabi App.vue ya firebase i import etmeliyiz önce, sayfayı yenilediğimizd3e yani maount olduğunda bzim user gelecek direkt çnkü firebase giriş yapmıştık, 

* data da gerekli tanımlamaları yaptık, denememizi yaptık sıkıtı yok
* şimdi log out yapalım, yine docs dan bakacağız, password authentication içinde sign out kodunu alalım, AppHeader da login butonu yanına birde log out butonu yapalım, ve logout methodunuda AppHeader içine koyalım, 

* App.vue ya mounted olarak koyduğumuz firebase.auth().onAuthStateChanged methodun anlamı authstate i değiştiğinde aşağıdaki işleri yap demek, 

*  birde login a loading ekleyelim, loginModal.vue ya gdelim,data da ve methodumuzda değişiklikleri yapalım, loading olduğu esnada bir ikpon çıksın yada yazı fontı vs. butonun içinde, emoji koyduk, giriş başarılı old. inputları boşaltsın o ada tamam ve modal ı kapatsın, kapatmayı normalde emitleyerek yapıyorduk burada kapatma için method yazalım, ve onu kullanalım, emit i de o functionun içine koyalım, ve login sonrasına ekleyelim, deeyelim, başarılı

* template ref konusu, mesela dc heroes deki input alalınıa ref girelim, ref="newHeroRef" bunuda mounted a koyalıım console a bakalım, proxy içinde geldi, bunu mounted içinden console.log(this.$refs.newHeroRef) olarak görek istersek 
<input class="border rounded" type="text" placeholder="add a hero"> 
gelir, mesela bununla mount ile beraber focus layabilirz
this.$refs.newHeroRef.focus() ile, 

* markdown.vue da textarea ya ref tanımlayalım, tamamlandı

* loginModal.vue da email iputunada ref tanımlayalım, sıkıntı yok

* şimdi login olduktan sonra login butonu kaybolsun onu yapalım, bunu props ile yapacağız, props u parenttan child a veri yollamakta kullanırız, passing data from parents to child
şimdi App.vue dan AppHeader.vue da kullanılmak üzere dan aşağıdaki şekilde bir veri yolluyoruz
<AppHeader isLoggedIn="isLoggedIn" @open-login-modal="isLoginOpen = true" />
isLoggedIn olarak isLoggedIn i yolluyoruz, bunu AppHeader.vue dan da (child) yakalayacağız, AppHeader.vue ya gidip 
props : ['isLoggedIn'],
hazırlıyoruz yani bu isimle gelen şey props dur ve bunu yakala diyoruz, bunu child da yakaladık bu bilgiyi logout butonunda v-if olarak kullanıyoruz
     <button  v-if="isLoggedIn" class="mx-2" @click="logout">logout</button>
    <button v-else class="mx-2" @click="$emit('open-login-modal')">login</button>
    şeklinde
    props larda eğer gelecek props un tipinide belirtmek isitiyorsak bu sefer array değil object olarak hazırlarız, 
    props: {
  title: String,
  likes: Number,
  isPublished: Boolean,
  commentIds: Array,
  author: Object,
  callback: Function,
  contactsPromise: Promise // or any other constructor
}

* login with google ı yapalım, LoginModal.vue da butonu yapalım ve firebase docs a bakalım, oradan gerekli fdüzenlemeleri yaptıktan sonra firebase console dan authentication daki giriş seçeneklerindende google ı aktifleştirmemiz lazım, aha sonra login sonrası modal ı kapatması için gerekli close methodu eklemeliyiz, 

* login with google başka bir componentte olabilir


* calculator vue 3 özellikleri ile yapılacak, açıklamalrı componentin içinde

* reusable modal yapımı, pages > ReusableModal.vue yapalım, router.js ya ekleyelim, 

* components içine Modal.vue yapıp bunu ReusableModal.vue  içinde kullanacağız, 

* slot kullanımı yapacağız, named slot kullanacağız, # kullanımı v-slot un kısaltılmışı
burada aynı modal ı yani Modal.vue yu iki sefer kullanıyoruz ancak ikisi içinde ayrı değer kullanmalıyoz, bunu da named slot ile yapıyoruz
#title Modal.vue da slot un adı titile burada #title olarak hazırlanmış yerdeki elementi alıyor buraya getiriyor, sonta burada #title olarak belittiğimiz yerdeki veriyi alıp orada name i title olan kısma basıyor ve ekrana veriyor, modal.vue title ve body isimli iki slot yapısı var onları buraya getiriyor, buradaki title ve body deki bilgiyi alıp getidiği ilgili slotlara basıyor, template şeklinde kualmndığımızıa dikkat named slot ları, 

* #title kullanımı v-slot un kısaltılmış hali 
  modaldaki sectinda bir yere tıklayınca oradaki close functionu buraya close u emitliyor nburada bunu yakalyınca bu emitlenen burada isModalOpen ın değerini değitiryor

* reusable konusunda örneğin calculator daki window.addeventlistener kısmını balka bir soyayay taşıyor onu yeniden kullnaılabilir hale getirebiliriz, hatırlayalım, mounted ve unmounted hook larında function atamıştık, function keydown ile çalışıyordu ve window nesnesine erişerek çalışıyordu bunu calculator.vue dan alıp başka yere taşıyalım oradan export edip calculaor.vue dan da import edelim

* utilities > composition > useWindowEevent.js yapalım, 

* real time chat application with firebase, pages > chats.vue ile başlayalım, routes.js auyarlayalım sonrada AppHeader da ayarımızı yapalım, 

* firebase e gidip projedeki realtime database e gidelim, biz zaten firebase ebağlantı yapmıştık, bu yüzden direkt Chat.vue dan bağlanma kodlarını yazalım ancak bundan önce utilities > firebase e gidip firebase/database i import edelim, deneylim ok, db ile bağlandık, 

* şimdi firebase db de manuel olarak bir chat hazırlayıp bunu çekmeye çalışalım, 

* aşağıdaki kod ile firebase den hazırladığımız realtime db den hazırladığımız chat i çekebildik

import { onMounted, ref } from 'vue'
import firebase from "../utilities/firebase"

    export default {
        setup(){

            const chats = ref({})
            onMounted(async () => {
                const db = firebase.database()
                const collection =db.ref('chats')
                const data = await collection.once("value")
                // console.log(data.val())
                chats.value = data.val();
            })
            return { chats }
        }
    }

     <div v-for="chat in chats" :key="chat.message">{{chat.message}}</div>

* realtime kodu, db de değişiklik olduğunda direkt sayfayı yenilemeden onu çekiyor, 

          setup(){

            // const chats = ref({}) 
            //reactive olayını görelim
            const state = reactive({
                chats : {}
            })
            onMounted(async () => {
                const db = firebase.database()
                const collection =db.ref('chats')
                const data = await collection.once("value")
                // console.log(data.val())
                // chats.value = data.val();
                //reactive için
                    state.chats = data.val()
                collection.on('value', (snapshot) => {
                    state.chats = snapshot.val()
                })
            })

            // return { chats } //reactive için
            return { state }
        }
    }







* 







    * VUEX 

    * vue 3 için install npm install vuex@next --save
    * dosya yapısına bakalım, src > store > index.js içine getting startted daki index.js yapısını kpyalayalım, store onlara export edelim,  daha son ra main.js içine store u ekleyelim main.js içi
      import { createApp } from 'vue'
    import App from './App.vue'
    import "./assets/style.css"
    import router from './router'
    import store from './store/index'

    // createApp(App).mount('#app')
    const app = createApp(App)
    app.use(router)
    app.use(store)
    app.mount('#app')

    * 










* custom vue js middleware, router da redirect konusu, protecting route, navigation guards, beforeeach,

* mesela home dan sayfaya girdik, chat e tıkladık, chat sayfası geldi, ama sisteme login olmadık daha, işte şimdi bu sıkıntının üzerine gidiyoruz, 










* CRUD app with external api, npm i axios kuralım projeye ve https://reqres.in/ kullanacağız external API olarak, pages > UserCrud.vue hazırlayaralım, AppHeader.vue ya gidip header ını ayarlayalım, router.js ye gidip route unu ayarlayalım, 
her taraf boş çünkü önceki hazırladığımız reqres e göreydi, 

* şimdi UserCrud.vue ya bir add butonu ekleyelim, buda bir modal açsın oradan bilgileri girelim...

* önceden hazırladığımız bir modal vardı, onu kullanalım, UserCrud.vue alt tarafına teleport ile modal ı kullanalım. 




* axios için src > plugins > axios.js yaptık içine UserCrud.vue daki axios importunu ve axios baseUrl sini taşıdık, daha sonra oradan export edip yeniden UserCrud.vue dan import ettik, denemeyi yaptık sıkıntı yok, 

* create, şimdi bu noktada API adresimizi değiştireceğiz, https://crudcrud.com/api/1cb8fe0125ac4d6bb79188497edfd15b
bu crucrud ın bize verdiği API bunu .env ye gidip eskisiyle değiştirelim

* butonu yaptık, modal ı teleport içine koyduk, butone açacak click i ve modalın knedisine de kapatacak olanı verdik

* şimdi Modal içine body i de hazırlayalım, bir form olacak içinde name, email ve avatar url si olacak sonra bunu setup da form nesnesi içine bağlayacağız

* bağladık ve reqres deki api den isim mail ve avatar adreslerini alıp yeni user girer gibi mopdalımızı açıp girdik ve crudcrud a eklememiz başarılı, formu boşaltalım, bunlardan bir kaç tane aldık, add user ile ekledik denemeler yaptık vs sıkıntı yok,

* delete; için tabloyu düzenleyelim başlık actions td ye ise button koyalım, destroy functon oluşturalım vs. ... başarılı

* şimdi src > components > UserCrud > Create.vue hazırlayalım, router.js ve AppHeader larını da düzenleyelim, 

* daha sonra projeye https://github.com/tensorflow/tfjs-models/blob/master/coco-ssd/demo/package.json sayfasındaki dependecies leri 3+2 şeklinde yükleyelim, sonrada dokumantasyona gidelim, (https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd)
buradaki npm kısmındaki require ları alıp Tensorflow.vue ya import edelim, 

* sayfada yer alana çalışması için gerekli kodları,
    (async () => {
  const img = document.getElementById('img');

  // Load the model.
  const model = await cocoSsd.load();

  // Classify the image.
  const predictions = await model.detect(img);

  console.log('Predictions: ');
  console.log(predictions);
})();

mounted olarak yerleştirelim ve düzenleyelim,

* 






* tensorflow.js ile object detection, pages > Tensorflow.vue